//
// Generated file, do not edit! Created by opp_msgtool 6.0 from roadConstruction.msg.
//

#ifndef __VEINS_ROADCONSTRUCTION_M_H
#define __VEINS_ROADCONSTRUCTION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace veins {

class roadConstruction;

}  // namespace veins

#include "veins/modules/messages/BaseFrame1609_4_m.h" // import veins.modules.messages.BaseFrame1609_4


namespace veins {

/**
 * Class generated from <tt>roadConstruction.msg:27</tt> by opp_msgtool.
 * <pre>
 * packet roadConstruction extends BaseFrame1609_4
 * {
 *     string demoData;
 *     double Posx;
 *     double Posy;
 *     int freeLaneID;
 *     int ttl;
 * 
 * }
 * </pre>
 */
class roadConstruction : public ::veins::BaseFrame1609_4
{
  protected:
    ::omnetpp::opp_string demoData;
    double Posx = 0;
    double Posy = 0;
    int freeLaneID = 0;
    int ttl = 0;

  private:
    void copy(const roadConstruction& other);

  protected:
    bool operator==(const roadConstruction&) = delete;

  public:
    roadConstruction(const char *name=nullptr, short kind=0);
    roadConstruction(const roadConstruction& other);
    virtual ~roadConstruction();
    roadConstruction& operator=(const roadConstruction& other);
    virtual roadConstruction *dup() const override {return new roadConstruction(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getDemoData() const;
    virtual void setDemoData(const char * demoData);

    virtual double getPosx() const;
    virtual void setPosx(double Posx);

    virtual double getPosy() const;
    virtual void setPosy(double Posy);

    virtual int getFreeLaneID() const;
    virtual void setFreeLaneID(int freeLaneID);

    virtual int getTtl() const;
    virtual void setTtl(int ttl);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const roadConstruction& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, roadConstruction& obj) {obj.parsimUnpack(b);}


}  // namespace veins


namespace omnetpp {

template<> inline veins::roadConstruction *fromAnyPtr(any_ptr ptr) { return check_and_cast<veins::roadConstruction*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __VEINS_ROADCONSTRUCTION_M_H

